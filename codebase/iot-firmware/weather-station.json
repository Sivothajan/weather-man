{
  "name": "weather-station",
  "type": "ino",
  "files": [
    {
      "name": "weather-station.ino",
      "content": "#include <DHT.h>\n#include <LiquidCrystal_I2C.h>\n#include <SoftwareSerial.h>\n#include <SPI.h>\n#include <SD.h>\n#include \"config.h\"\n\n#define DHTPIN 2\n#define DHTTYPE DHT11\n#define SOIL_PIN A0\n#define RAIN_PIN A1\n#define FIRE_PIN 6\n#define SD_CS 10\n\nDHT dht(DHTPIN, DHTTYPE);\nLiquidCrystal_I2C lcd(0x27, 16, 2);\nSoftwareSerial espSerial(3, 4);\n\nvoid setup() {\n  Serial.begin(9600);\n  espSerial.begin(9600);\n  dht.begin();\n  lcd.begin(16, 2);\n  lcd.backlight();\n  pinMode(FIRE_PIN, INPUT);\n\n  lcd.print(\"Weather Man\");\n  delay(2000);\n  lcd.clear();\n\n  if (!SD.begin(SD_CS)) {\n    Serial.println(\"SD init failed!\");\n  }\n\n  connectWiFi();\n}\n\n/**\n * @brief Main loop for weather station firmware.\n * \n * Reads sensor data (temperature, humidity, soil moisture, rain, fire detection),\n * processes and displays the results on an LCD, prints to Serial for debugging,\n * logs to SD card, and sends data to an API.\n * \n * Operation steps:\n * 1. Read temperature and humidity from DHT sensor.\n * 2. Read raw soil moisture and rain sensor values.\n * 3. Detect fire using digital input.\n * 4. Map raw soil sensor value to percentage (0-100%).\n * 5. Determine rain status based on rain sensor threshold.\n * 6. Display processed sensor values (temperature, humidity, soil %, rain status) on LCD.\n * 7. Display raw soil and rain sensor values on LCD.\n * 8. Display fire detection status on LCD.\n * 9. Print both processed and raw sensor values to Serial for debugging.\n * 10. Log all sensor data (processed and raw) to SD card.\n * 11. Send all sensor data (processed and raw) to remote API.\n * \n * Timing:\n * - Each LCD display step is shown for 2 seconds.\n * - After all displays and data operations, an additional 4-second delay is added.\n * - Total loop cycle time: 10 seconds.\n * \n * @note\n * - Ensure DHT, LCD, and pin objects are initialized in setup().\n * - logToSD() and sendToAPI() must be implemented elsewhere.\n * - Adjust sensor thresholds as needed for your hardware.\n */\n\nvoid loop() {\n  float temp = dht.readTemperature();\n  float humid = dht.readHumidity();\n  int soilRaw = analogRead(SOIL_PIN);\n  int rainRaw = analogRead(RAIN_PIN);\n  bool fireDetected = digitalRead(FIRE_PIN) == LOW;\n\n  int soil = map(soilRaw, 1023, 0, 0, 100);\n  bool rain = rainRaw < 500;\n\n  // LCD Output: processed values\n  lcd.setCursor(0, 0);\n  lcd.print(\"T:\"); lcd.print(temp); lcd.print(\"C H:\"); lcd.print(humid);\n  lcd.setCursor(0, 1);\n  lcd.print(\"S:\"); lcd.print(soil); lcd.print(\"% \");\n  lcd.print(rain ? \"Rain\" : \"Dry\");\n  delay(2000);\n\n  // LCD Output: raw values\n  lcd.clear();\n  lcd.setCursor(0, 0);\n  lcd.print(\"SoilRaw:\"); lcd.print(soilRaw);\n  lcd.setCursor(0, 1);\n  lcd.print(\"RainRaw:\"); lcd.print(rainRaw);\n  delay(2000);\n\n  // LCD Output: fire\n  lcd.clear();\n  lcd.setCursor(0, 0);\n  lcd.print(\"Fire:\");\n  lcd.setCursor(6, 0);\n  lcd.print(fireDetected ? \"FIRE!\" : \"NoFire\");\n  delay(2000);\n\n  // Serial Debug: print both processed and raw\n  Serial.print(\"T: \"); Serial.print(temp);\n  Serial.print(\" H: \"); Serial.print(humid);\n  Serial.print(\" Soil: \"); Serial.print(soil);\n  Serial.print(\" (Raw: \"); Serial.print(soilRaw); Serial.print(\")\");\n  Serial.print(\" Rain: \"); Serial.print(rain);\n  Serial.print(\" (Raw: \"); Serial.print(rainRaw); Serial.print(\")\");\n  Serial.print(\" Fire: \"); Serial.println(fireDetected ? \"FIRE!\" : \"No fire\");\n\n  logToSD(temp, humid, soil, soilRaw, rain, rainRaw, fireDetected);\n  sendToAPI(temp, humid, soil, soilRaw, rain, rainRaw, fireDetected);\n\n  delay(4000); // total delay = 2s + 2s + 2s + 4s = 10s\n}\n\n// ----- SD Logging -----\nvoid logToSD(float temp, float humid, int soil, int soilRaw, bool rain, int rainRaw, bool fire) {\n  File file = SD.open(\"datalog.txt\", FILE_WRITE);\n  if (file) {\n    file.print(\"T:\"); file.print(temp);\n    file.print(\", H:\"); file.print(humid);\n    file.print(\", Soil:\"); file.print(soil);\n    file.print(\", SoilRaw:\"); file.print(soilRaw);\n    file.print(\", Rain:\"); file.print(rain ? \"1\" : \"0\");\n    file.print(\", RainRaw:\"); file.print(rainRaw);\n    file.print(\", Fire:\"); file.println(fire ? \"1\" : \"0\");\n    file.close();\n  } else {\n    Serial.println(\"SD log failed.\");\n  }\n}\n\n// ----- WiFi Connect -----\nvoid connectWiFi() {\n  espSerial.println(\"AT+CWMODE=1\");\n  delay(2000);\n  espSerial.print(\"AT+CWJAP=\\\"\"); espSerial.print(ssid);\n  espSerial.print(\"\\\",\\\"\"); espSerial.print(password); espSerial.println(\"\\\"\");\n  delay(8000);\n}\n\n// ----- API Call (JSON POST) -----\nvoid sendToAPI(float temp, float humid, int soil, int soilRaw, bool rain, int rainRaw, bool fire) {\n  String json = \"{\";\n  json += \"\\\"temperature\\\":\" + String(temp, 2) + \",\";\n  json += \"\\\"humidity\\\":\" + String(humid, 2) + \",\";\n  json += \"\\\"soil_moisture\\\":\" + String(soil) + \",\";\n  json += \"\\\"soil_raw\\\":\" + String(soilRaw) + \",\";\n  json += \"\\\"rain\\\":\" + String(rain ? 1 : 0) + \",\";\n  json += \"\\\"rain_raw\\\":\" + String(rainRaw) + \",\";\n  json += \"\\\"fire\\\":\" + String(fire ? 1 : 0);\n  json += \"}\";\n\n  int len = json.length();\n\n  espSerial.println(\"AT+CIPSTART=\\\"TCP\\\",\\\"\" + String(apiHost) + \"\\\",80\");\n  delay(3000);\n\n  String req = \"POST \" + String(apiPath) + \" HTTP/1.1\\r\\n\";\n  req += \"Host: \" + String(apiHost) + \"\\r\\n\";\n  req += \"Content-Type: application/json\\r\\n\";\n  req += \"Content-Length: \" + String(len) + \"\\r\\n\";\n  req += \"Connection: close\\r\\n\\r\\n\";\n  req += json;\n\n  espSerial.print(\"AT+CIPSEND=\");\n  espSerial.println(req.length());\n  delay(1000);\n\n  espSerial.print(req);\n  delay(2000);\n  espSerial.println(\"AT+CIPCLOSE\");\n}\n"
    }
  ]
}
